set nocompatible " be iMproved, required
filetype off " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ---------------------------------------------------
" lst Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

"/////////////////////////////////////////////////////////////////////////////
" Visual
"/////////////////////////////////////////////////////////////////////////////
" ---------------------------------------------------
" vim-color-solarized
Plugin 'altercation/vim-colors-solarized'

" ---------------------------------------------------
" vim-airline
Plugin 'vim-airline/vim-airline'

if has('gui_running')
    let g:airline_powerline_fonts = 1
else
    let g:airline_powerline_fonts = 0
endif

let g:airline#extensions#gutentags#enabled = 1
" let g:airline#extensions#tabline#enabled = 1 " NOTE: When you open lots of buffers and typing text, it is so slow.
" let g:airline#extensions#tabline#buffer_nr_show = 1
" let g:airline#extensions#tabline#show_buffers = 1
" let g:airline#extensions#tabline#fnamemod = ':t'
" let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
" let g:airline_section_c = '%t'
" let g:airline_section_warning = airline#section#create(['whitespace']) " NOTE: airline#section#create has no effect in .vimrc initialize pahse
" let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#whitespace#check(),0)}'
" let g:airline_section_warning = ''

" ------------------------------------------------------------------
Plugin 'vim-airline/vim-airline-themes'
let g:airline_theme='luna'

"/////////////////////////////////////////////////////////////////////////////
" Navigation
"/////////////////////////////////////////////////////////////////////////////
" ---------------------------------------------------
" nerdtree: invoke by F2
Plugin 'scrooloose/nerdtree'

let g:NERDTreeWinSize = 40
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'
nnoremap <F2> :NERDTreeToggle<CR>
nnoremap <F3> :NERDTreeFind<CR>

" ------------------------------------------------------------------
" same shortcuts for vim and tmux splits
Plugin 'christoomey/vim-tmux-navigator'
" Switch between splits
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" ------------------------------------------------------------------
" switch between .c* and .h* files
Plugin 'santiny424/CurtineIncSw.vim'
nnoremap <C-s> :call CurtineIncSw()<CR>

" ------------------------------------------------------------------
"  enable buffer kill without closing window
Plugin 'qpkorr/vim-bufkill'
" delete the buffer
nnoremap <leader>bd :BD<CR>
nnoremap <leader>bun :BUN<CR>

" ------------------------------------------------------------------
" better display of c++ codes
Plugin 'octol/vim-cpp-enhanced-highlight'
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1

" ---------------------------------------------------
" Integrate fzf in vim
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
nnoremap <leader>f :Files<CR>
nnoremap <leader>F :Files ${WORKSPACE_ROOT}<CR>

" ---------------------------------------------------
" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
Plugin 'Lokaltog/vim-easymotion'

map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" ---------------------------------------------------
" vim-fugitive: invoke most by <leader>gs
Plugin 'tpope/vim-fugitive'

nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>

" ------------------------------------------------------------------
" execute commands in tmux from vim directly
Plugin 'benmills/vimux'
" Prompt for a command to run
nnoremap <Leader>r :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
nnoremap <Leader>rr :VimuxRunLastCommand<CR>
" Inspect runner panel
"nnoremap <Leader>ir :VimuxInspectRunner<CR>
" Close the runner
"nnoremap <Leader>kr :VimuxCloseRunner<CR>

"/////////////////////////////////////////////////////////////////////////////
" Editing
"/////////////////////////////////////////////////////////////////////////////

" ---------------------------------------------------
" LargeFile
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

" ---------------------------------------------------
Plugin 'ntpeters/vim-better-whitespace'
" do not hightlight the whitespace
let g:better_whitespace_enabled=0
" strip whitespace when file is saved
let g:strip_whitespace_on_save=1

" ---------------------------------------------------
" vim-surround: invoke when you select words
" and press 's' followed by the separator
Plugin 'tpope/vim-surround'
xmap s <Plug>VSurround

" ---------------------------------------------------
"  doxygen comments support
"  try :Dox command when cursor is at the function def
Plugin 'vim-scripts/DoxygenToolkit.vim'
"let g:DoxygenToolkit_commentType = "C++"
nnoremap <unique> <leader>d :Dox<CR>

" ---------------------------------------------------
" nerdcommenter: invoke by <leader>c<space>, <leader>cl
Plugin 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
         \ 'vimentry': { 'left': '--' },
         \ }
map <unique> <F11> <Plug>NERDCommenterAlignBoth
map <unique> <C-F11> <Plug>NERDCommenterUncomment

" ---------------------------------------------------
" abular: invoke by <leader>= alignment-character
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
Plugin 'godlygeek/tabular'

nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
   let c = getchar()
   let c = nr2char(c)
   if a:ignore_range == 0
      exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
   else
      exec printf('Tabularize /%s', c)
   endif
endfunction

" ---------------------------------------------------
" DISABLE: undotree: invoke by <Leader>u
"Plugin 'mbbill/undotree'
"
"nnoremap <leader>u :UndotreeToggle<CR>
"let g:undotree_SetFocusWhenToggle=1
"let g:undotree_WindowLayout = 4
"
"" NOTE: this will prevent undotree closed then jump to minibufexpl
"function! g:CloseUndotree()
"    call UndotreeHide()
"    call ex#window#goto_edit_window()
"endfunction
"
"function g:Undotree_CustomMap()
"    if has('gui_running')
"        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
"    else
"        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
"    endif
"endfunction

"/////////////////////////////////////////////////////////////////////////////
" Code complete
"/////////////////////////////////////////////////////////////////////////////

" ------------------------------------------------------------------
" set path find/e command to include all the files and subdirectories
set path+=$PWD/**,$WORKSPACE_ROOT/targets/include/,$HOME/.caddir/RHEL6/.caddata/gcc/gcc/include/c++/4.4.2/,/sdev/opt/boost/1.65.1a,/sdev/opt/gtest/1.7.0.a,/sdev/opt/gmock/1.7.0.a
" a global tag file to include C++ common codes, gtest, gmock codes
set tags+=$HOME/.vim/globaltags
" use following command to generate global tags
"ctags -R -f $HOME/.vim/globaltags $HOME/.caddir/RHEL6/.caddata/gcc/gcc/include/c++/4.4.2/ /sdev/opt/boost/1.65.1a /sdev/opt/gtest/1.7.0.a /sdev/opt/gmock/1.7.0.a

" ------------------------------------------------------------------
"  auto complete for keywords, variable names, path, etc
Plugin 'exvim/ex-autocomplpop'

" ------------------------------------------------------------------
"  view functions, modules in c++ file
Plugin 'vim-scripts/taglist.vim'
let Tlist_Use_Right_Window   = 1
let Tlist_WinWidth = 60
nnoremap <silent> <F4> :TlistToggle<CR>

" ------------------------------------------------------------------
"  auto complete for c/c++ codes, such as after ->, . based on ctags
Plugin 'vim-scripts/OmniCppComplete'
" Note: this depends on ctags database, which is managed by vim-gutentags
" following options must be set to ctags (see .ctags file)
"You have to build your database with at least the following options:
   "--c++-kinds=+p  : Adds prototypes in the database for C/C++ files.
   "--fields=+iaS   : Adds inheritance (i), access (a) and function
   "signatures (S) information.
   "--extra=+q      : Adds context to the tag name. Note: Without this
   "option, the script cannot get class members.
   "--languages=c++ : Builds only the tags for C++ files.

" ------------------------------------------------------------------
"  ctags management
Plugin 'ludovicchabant/vim-gutentags'
" disable default project roots
let g:gutentags_add_default_project_roots = 0
" define own project root to only use git
let g:gutentags_project_root = ['.git']
" create tag file in .git directory
"let g:gutentags_ctags_tagfile = '.gutentagsfile'
" generate tag file when open vim immediately
let g:gutentags_generate_on_empty_buffer = 1
" extend cscope
"let g:gutentags_modules = ['ctags', 'cscope']
" .ctags option file shall be copied to ~/.ctags

" ------------------------------------------------------------------
"  enable vim shortcuts for cscope
"  try <C-]>, <C-\s> and <C-[spacebar]s>
"Plugin 'chazy/cscope_maps'

"" ------------------------------------------------------------------
"" DISABLE: not working. clang gives wrong output
"Plugin 'Rip-Rip/clang_complete'
"" auto select first entry without insert
"let g:clang_auto_select = 1
"" use libclang
""let g:clang_use_library = 1
"let g:clang_library_path = $HOME . '/.caddir/RHEL6/cadlib/'
"" auto pop after ->, ., ::
"let g:clang_complete_auto = 1
"" close preview window
"let g:clang_close_preview = 1
"" Show clang errors in the quickfix window
"let g:clang_complete_copen = 1
"" compiler options
"let g:clang_user_options = '-std=c++11 -I../include/ -I${WORKSPACE_ROOT}/targets/include/ -I${HOME}/.caddir/RHEL6/.caddata/gcc/gcc/include/c++/4.4.2/ -I/sdev/opt/boost/1.65.1a/ -I/sdev/opt/gmock/1.7.0.a/ -I/sdev/opt/gtest/1.7.0.a/'
"let g:clang_debug = 1
"" default <C-]> key conflicts with default vim shortcuts
""let g:clang_jumpto_declaration_key =""
"" disable clang snippets first
"let g:clang_snippets = 0
"let g:clang_snippets_engine = "clang_complete"

" ---------------------------------------------------
" DISABLE: not working. require latest vim with python supported, latest gcc and libclang
"Plugin 'valloric/youcompleteme'


"/////////////////////////////////////////////////////////////////////////////
"" TODO: choose a snippet plugin
"/////////////////////////////////////////////////////////////////////////////
" " ---------------------------------------------------
" Plugin 'Shougo/neosnippet.vim'

" " ---------------------------------------------------
" Plugin 'msanders/snipmate.vim'

" " ---------------------------------------------------
" Plugin 'spf13/snipmate-snippets'

call vundle#end()
filetype plugin indent on " required

