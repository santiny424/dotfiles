" Pathogen or Vundle (deafult is Vundle) {{{

" Comment-out if you want to use pahogen
" execute pathogen#infect()
" com! -nargs=+ Bundle

" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" ---------------------------------------------------
" lst Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" ---------------------------------------------------
" vim-color-solarized
Plugin 'altercation/vim-colors-solarized'

" ---------------------------------------------------
" vim-airline
Plugin 'vim-airline/vim-airline'

if has('gui_running')
    let g:airline_powerline_fonts = 1
else
    let g:airline_powerline_fonts = 0
endif

" let g:airline#extensions#tabline#enabled = 1 " NOTE: When you open lots of buffers and typing text, it is so slow.
" let g:airline#extensions#tabline#buffer_nr_show = 1
" let g:airline#extensions#tabline#show_buffers = 1
" let g:airline#extensions#tabline#fnamemod = ':t'
" let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
" let g:airline_section_c = '%t'
" let g:airline_section_warning = airline#section#create(['whitespace']) " NOTE: airline#section#create has no effect in .vimrc initialize pahse
" let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#whitespace#check(),0)}'
" let g:airline_section_warning = ''

" ------------------------------------------------------------------
Plugin 'vim-airline/vim-airline-themes'
let g:airline_theme='luna'

" ---------------------------------------------------
" ctrlp: invoke by <ctrl-p>
Plugin 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_follow_symlinks = 2
let g:ctrlp_max_files = 0 " Unset cap of 10,000 files so we find everything

" ---------------------------------------------------
" vim-fugitive: invoke most by :Gstatus
Plugin 'tpope/vim-fugitive'

nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>

" ---------------------------------------------------
" vim-surround: invoke when you select words
" and press 's' followed by the separator
Plugin 'tpope/vim-surround'

xmap s <Plug>VSurround

" ---------------------------------------------------
" nerdtree: invoke by :NERDTreeToggle
Plugin 'scrooloose/nerdtree'

let g:NERDTreeWinSize = 40
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'
nnoremap <F2> :NERDTreeToggle<CR>
nnoremap <F3> :NERDTreeFind<CR>

" ---------------------------------------------------
" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
Plugin 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
map <unique> <F11> <Plug>NERDCommenterAlignBoth
map <unique> <C-F11> <Plug>NERDCommenterUncomment

" ---------------------------------------------------
" syntastic: invoke when you save file and have syntac-checker
Plugin 'scrooloose/syntastic'

" ---------------------------------------------------
Plugin 'exvim/ex-autocomplpop'

" " ---------------------------------------------------
" DISABLE: use ex-autocomplpop instead
" " neocomplcache: invoke when you insert words
" Plugin 'Shougo/neocomplcache.vim'

" let g:neocomplcache_enable_at_startup = 1
" let g:neocomplcache_auto_completion_start_length = 2
" let g:neocomplcache_enable_smart_case = 1
" let g:neocomplcache_enable_auto_select = 1 " let neocomplcache's completion behavior like AutoComplPop
" " let g:neocomplcache_disable_auto_complete = 1 " Enable this if you like TAB for complete
" " inoremap <C-p> <C-x><C-u>
" " inoremap <expr><TAB>  pumvisible() ? '\<Down>' : '<TAB>'
" " inoremap <expr><S-TAB>  pumvisible() ? '\<Up>' : ''

" " ---------------------------------------------------
" DISABLE: use ex-autocomplpop instead
" " neocomplete: invoke when you insert words
" Plugin 'Shougo/neocomplete.vim'

" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_smart_case = 1
" let g:neocomplete#enable_auto_select = 1 " let neocomplete's completion behavior like AutoComplPop
" " Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" " ---------------------------------------------------
" DISABLE: use ex-autocomplpop instead
" " YouCompleteMe
" Plugin 'Valloric/YouCompleteMe'

" TODO: choose a snippet plugin
" " ---------------------------------------------------
" Plugin 'Shougo/neosnippet.vim'

" " ---------------------------------------------------
" Plugin 'msanders/snipmate.vim'

" " ---------------------------------------------------
" Plugin 'spf13/snipmate-snippets'

" ---------------------------------------------------
" DISABLE: undotree: invoke by <Leader>u
"Plugin 'mbbill/undotree'
"
"nnoremap <leader>u :UndotreeToggle<CR>
"let g:undotree_SetFocusWhenToggle=1
"let g:undotree_WindowLayout = 4
"
"" NOTE: this will prevent undotree closed then jump to minibufexpl
"function! g:CloseUndotree()
"    call UndotreeHide()
"    call ex#window#goto_edit_window()
"endfunction
"
"function g:Undotree_CustomMap()
"    if has('gui_running')
"        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
"    else
"        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
"    endif
"endfunction

" ---------------------------------------------------
" abular: invoke by <leader>= alignment-character
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
 Plugin 'godlygeek/tabular'

nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
    let c = getchar()
    let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction

" ---------------------------------------------------
" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
Plugin 'Lokaltog/vim-easymotion'

map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" ---------------------------------------------------
" LargeFile
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

" ---------------------------------------------------
Plugin 'ntpeters/vim-better-whitespace'
nnoremap <unique> <leader>w :StripWhitespace<CR>
let g:strip_whitespace_on_save=1

" ------------------------------------------------------------------
" same shortcuts for vim and tmux splits
Plugin 'christoomey/vim-tmux-navigator'
" Switch between splits
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" ------------------------------------------------------------------
" execute commands in tmux from vim directly
Plugin 'benmills/vimux'
" Prompt for a command to run
nnoremap <Leader>r :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
nnoremap <Leader>rr :VimuxRunLastCommand<CR>
" Inspect runner panel
"nnoremap <Leader>ir :VimuxInspectRunner<CR>
" Close the runner
"nnoremap <Leader>kr :VimuxCloseRunner<CR>

" ------------------------------------------------------------------
" switch between .c* and .h* files
Plugin 'ericcurtin/CurtineIncSw.vim'
nnoremap <C-s> :call CurtineIncSw()<CR>

" ------------------------------------------------------------------
"  enable buffer kill without closing window
Plugin 'qpkorr/vim-bufkill'
" delete the buffer
nnoremap <leader>bd :BD<CR>
nnoremap <leader>bun :BUN<CR>

