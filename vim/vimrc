" VIM configurations
" Sections:
" 1.Basic
" 2.Plugins
" 3.Visual
" 4.Editing
" 5.Navigations

"/////////////////////////////////////////////////////////////////////////////
" |Basic| configurations at the beginning
"/////////////////////////////////////////////////////////////////////////////
   " ------------------------------------------------------------------
   " Use Vim instead of Vi
   set nocompatible
   " ------------------------------------------------------------------
   " utility functions for platform compatibility
   function! OSX()
       return has('macunix')
   endfunction
   function! LINUX()
       return has('unix') && !has('macunix') && !has('win32unix')
   endfunction
   function! WINDOWS()
       return  (has('win16') || has('win32') || has('win64'))
   endfunction
   " ------------------------------------------------------------------
   "  remap leader key
   let g:mapleader = ";"
   " ------------------------------------------------------------------
   " language and encoding setup
   " always use English menu
   " NOTE: this must before filetype off, otherwise it won't work
   set langmenu=none
   " use English for anaything in vim-editor.
   if WINDOWS()
      silent exec 'language english'
   elseif OSX()
      silent exec 'language en_US'
   else
      let s:uname = system("uname -s")
      if s:uname == "Darwin\n"
         " in mac-terminal
         silent exec 'language en_US'
      else
         " in linux-terminal
         silent exec 'language en_US.utf8'
      endif
   endif
   " ------------------------------------------------------------------
   " try to set encoding to utf-8
   if WINDOWS()
      " Be nice and check for multi_byte even if the config requires
      " multi_byte support most of the time
      if has('multi_byte')
         " Windows cmd.exe still uses cp850. If Windows ever moved to
         " Powershell as the primary terminal, this would be utf-8
         set termencoding=cp850
         " Let Vim use utf-8 internally, because many scripts require this
         set encoding=utf-8
         setglobal fileencoding=utf-8
         " Windows has traditionally used cp1252, so it's probably wise to
         " fallback into cp1252 instead of eg. iso-8859-15.
         " Newer Windows files might contain utf-8 or utf-16 LE so we might
         " want to try them first.
         set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
      endif

   else
      " set default encoding to utf-8
      set encoding=utf-8
      set termencoding=utf-8
   endif
   scriptencoding utf-8

"/////////////////////////////////////////////////////////////////////////////
" |Plugins| installation (Use Vundle)
"/////////////////////////////////////////////////////////////////////////////
   " load default plugins config
   if exists('g:vim_custom_path')
       let vimrc_plugins_path = g:vim_custom_path.'/vimrc.plugins'
       exec 'source ' . fnameescape(vimrc_plugins_path)
   else
       echoerr "Not correctly installed!"
   endif
   " load local plugins if exists
   let vimrc_plugins_local_path = '~/.vimrc.plugins.local'
   if filereadable(expand(vimrc_plugins_local_path))
       exec 'source ' . fnameescape(vimrc_plugins_local_path)
   endif
"/////////////////////////////////////////////////////////////////////////////
" |Visual|
"/////////////////////////////////////////////////////////////////////////////
   " ------------------------------------------------------------------
   " set theme to solarized, require plugin vim-colors-solarized
   syntax enable " required
   if has('gui_running')
       set background=dark
   else
       set background=dark
       set t_Co=256 " make sure our terminal use 256 color
       let g:solarized_termcolors = 256
   endif
   colorscheme solarized
   " ------------------------------------------------------------------
   set matchtime=0   " 0 second to show the matching paren ( much faster )
   set nu            " show line number
   set scrolloff=8   " minimal number of screen lines to keep above and below the cursor
   set sidescrolloff=15
   set sidescroll=1
   set nowrap        " do not wrap text
   "set linebreak     " wrap lines at convenient points
   set ruler         " show the cursor position all the time
   set visualbell    " No sounds
   "  Disable beep sounds
   set noeb vb t_vb=

"/////////////////////////////////////////////////////////////////////////////
" |Editing|
"/////////////////////////////////////////////////////////////////////////////
   " ------------------------------------------------------------------
   set backspace=indent,eol,start " allow backspacing over everything in insert mode
   set ve=block   " in vertical visual mode, cursor can be really positioned vertically
   set hidden     " allow to change buffer without saving
   set lazyredraw " do not redraw while executing macros (much faster)
   set autoread   " reload file when changed outside of vim
   " Escape insert mode easier
   inoremap kj <Esc>
   " paste yarked text in command line mode
   cnoremap <leader>P <C-r>"
   " ------------------------------------------------------------------
   " turn off swap files
   set noswapfile
   set nobackup
   set nowb
   " ------------------------------------------------------------------
   " indent
   set autoindent   " automatically indent in a new line
   set shiftwidth=4 " set shift width in new line as 4 spaces
   set tabstop=4    " set tab width to 4
   set expandtab
   " set indent of 3 for python and clang files
   autocmd FileType python setlocal ts=3 sw=3 expandtab
   autocmd FileType c setlocal ts=3 sw=3 expandtab
   autocmd FileType cpp setlocal ts=3 sw=3 expandtab
   " ------------------------------------------------------------------
   " persistent undo
   " Keep undo history across sessions, by storing in file.
   " Only works all the time.
   if has('persistent_undo')
      silent !mkdir ~/.vim/backups > /dev/null 2>&1
      set undodir=~/.vim/backups
      set undofile
   endif
   " ------------------------------------------------------------------
   "  shortcut for copy/paste
   "  yank to system clipboard
   vnoremap <Leader>y "+y
   " paste from system clipboard
   nmap <Leader>p "+p
   " ------------------------------------------------------------------
   " enhance '<' '>' , do not need to reselect the block after shift it.
   vnoremap < <gv
   vnoremap > >gv
   " ------------------------------------------------------------------
   "  auto pair brackets while typing
   "  for existing written text, use plugin surround
   inoremap <leader>( (<CR>)<C-c>O
   inoremap <leader>{ {<CR>}<C-c>O
   inoremap <leader>[ [<CR>]<C-c>O

"/////////////////////////////////////////////////////////////////////////////
" |Navigations|
"/////////////////////////////////////////////////////////////////////////////
   " ------------------------------------------------------------------
   "  search
   set showmatch   " show matching paren
   set incsearch   " do incremental searching
   set hlsearch    " highlight search terms
   set ignorecase  " ignore case...
   set smartcase   " ... unless we type in capital
   nnoremap <F8> :noh<CR>
   " ------------------------------------------------------------------
   "  folding
   set foldmethod=indent   "fold based on indent
   set foldnestmax=3       "deepest fold is 3 levels
   set nofoldenable        "dont fold by default
   " toggle folding with space
   nnoremap <space> za
   set wildmenu            " turn on wild menu, try typing :h and press <Tab>
   " ignore those files. also applicable for ctrl-p plugins
   set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
   set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
   set showcmd             " display incomplete commands
   " ------------------------------------------------------------------
   " highlight current line
   " http://vim.wikia.com/wiki/Highlight_current_line
   set cursorline
   augroup CursorLine
      au!
      au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
      au WinLeave * setlocal nocursorline
   augroup END
   " ------------------------------------------------------------------
   " line numbers (Hybrid)
   " https://jeffkreeftmeijer.com/vim-number/#relative-line-numbers
   :set number relativenumber
   :augroup numbertoggle
   :  autocmd!
   :  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
   :  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
   :augroup END

